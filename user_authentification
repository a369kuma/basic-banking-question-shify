# This script simulates a basic banking system with the following features:
# - Users can create an account with an initial balance of zero.
# - The account supports three main operations:
#   1. Checking the current balance.
#   2. Depositing money into the account.
#   3. Withdrawing money from the account.
# - Deposits and withdrawals are handled as floating-point numbers to ensure precision.
# - The system ensures that:
#   - Deposits must be positive amounts.
#   - Withdrawals cannot exceed the available balance.
#   - Withdrawals must also be positive amounts.
# - The application is interactive and allows users to perform these operations repeatedly.
# - The user can exit the application at any time.

class Account:
    def __init__(self):
        # Initialize the account with a balance of zero and an empty transaction history
        self.balance = 0.0
        self.transaction_history = []

    def deposit(self, amount: float):
        # Deposit money into the account
        if amount > 0:
            self.balance += amount
            self.transaction_history.append({"type": "deposit", "amount": amount})
            print(f"Deposited: ${round(amount, 2)}")
        else:
            print("Deposit amount must be positive.")

    def withdraw(self, amount: float):
        # Withdraw money from the account
        if amount > self.balance:
            print("Insufficient balance.")
        elif amount > 0:
            self.balance -= amount
            self.transaction_history.append({"type": "withdrawal", "amount": amount})
            print(f"Withdrew: ${round(amount, 2)}")
        else:
            print("Withdrawal amount must be positive.")

    def check_balance(self):
        # Check the current balance
        print(f"Current balance: ${round(self.balance, 2)}")




class AuthenticatedAccount(Account):
    # Further Expansions:
    # - User Authentication: Requires a username and password combination for access.
    # - Password Recovery: Allows users to recover their password using a security question.
    # - Session Management: Tracks user sessions and enforces automatic logout after inactivity.

    def __init__(self, username: str, password: str, security_question: str, security_answer: str):
        super().__init__()
        self.username = username
        self.password = password
        self.security_question = security_question
        self.security_answer = security_answer
        self.last_active_time = time.time()

    def authenticate(self, username: str, password: str):
        # Authenticate user with username and password
        if self.username == username and self.password == password:
            self.last_active_time = time.time()
            print("Authentication successful.")
            return True
        else:
            print("Authentication failed. Invalid username or password.")
            return False

    def recover_password(self, security_answer: str):
        # Recover password using the security question
        if self.security_answer == security_answer:
            print(f"Your password is: {self.password}")
        else:
            print("Security answer is incorrect.")

    def is_session_active(self, timeout: int = 300):
        # Check if the session is still active based on inactivity timeout
        if time.time() - self.last_active_time > timeout:
            print("Session expired due to inactivity.")
            return False
        return True

    def update_last_active(self):
        # Update the last active time
        self.last_active_time = time.time()

    def deposit(self, amount: float):
        if not self.is_session_active():
            return
        self.update_last_active()
        super().deposit(amount)

    def withdraw(self, amount: float):
        if not self.is_session_active():
            return
        self.update_last_active()
        super().withdraw(amount)

    def check_balance(self):
        if not self.is_session_active():
            return
        self.update_last_active()
        super().check_balance()


